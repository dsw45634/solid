Reguły SOLID mówią nam, jak mamy rozmieszczać swoje metody i struktury danych w klasach i jak te klasy mają być ze sobą powiązane. Celem tych reguł jest przygotowanie pośrednich struktur oprogramowania które będą dobrze znosiły zmiany, będą łatwe do zrozumienia i staną się podstawą dla komponentów, które zostaną użyte w wielu systemach.
SRP – Single Responsibility Principle – reguła pojedynczej odpowiedzialności. Na najlepszą strukturę systemu oprogramowania wpływa społeczna struktura używającej go organizacji, dlatego każdy moduł oprogramowania powinien mieć tylko jeden powód do zmiany.
OCP – Open-Closed Principle – reguła otwarty – zamknięty. Jeżeli oprogramowanie ma pozwalać na łatwe wprowadzanie zmian, to musi zostać zaprojektowane tak aby pozwalało na zmianę zachowania systemu przez dodawanie nowego kodu, a nie modyfikowanie istniejącego.
LSP – Liskov Substitution Principle – reguła podstawiania Liskov. Chcąc zbudować system z wymiennych części, trzeba sprawić, aby te części stosowały się do kontraktu, który pozwoli na zastąpienie pewnych części innymi.
ISP – Interface Segregation Principle – reguła podziału interfejsów. Ta reguła nakazuje programistom, aby unikali tworzenia zależności od elementów, których nie potrzebują.
DIP – Dependency Inversion Principle – reguła odwracania zależności. Kod implementujący reguły biznesowe nie powinien zależeć od kodu implementującego niskopoziomowe szczegóły. To właśnie szczegóły powinny zależeć od reguł biznesowych.
